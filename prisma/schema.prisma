// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Necessary for Next Auth
model Account {
  id Int  @id @default(autoincrement())
  userId Int
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id Int @id @default(autoincrement())
  sessionToken String @unique
  userId Int
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id Int @id @default(autoincrement())
  name String?
  fullname String?
  email String? @unique
  phone String?
  address1 String?
  address2 String?
  emailVerified DateTime?
  password String?
  image String?
  path String?
  accounts Account[]
  sessions Session[]
  avatar UserAvatar?
  verificationToken VerificationToken[]
  forgetPasswordToken ForgetPasswordToken[]
  comment Comment[]
  order Order[]
}

model UserAvatar {
  id Int @id @default(autoincrement())
  fileName String
  originalFileName String
  path String
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id Int @id @default(autoincrement())
  token String @unique
  expires DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model ForgetPasswordToken {
  id Int @id @default(autoincrement())
  token String @unique
  expires DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Product {
  id Int @id @default(autoincrement())
  title String
  image ProductImage[]
  category String
  available Int?
  price Int
  description String
  brand String
  colors String?
  sizes String?
  homeSection HomeSection[] @relation("HomeSectionProducts")
  orderItem orderItem[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  fileName String
  originalFileName String
  path String
  product Product @relation(fields: [productId], references: [id])
  productId Int
}

model HeroBanner {
  id Int @id @default(autoincrement())
  fileName String
  originalFileName String
  path String
}

model HomeSection {
  id Int @id @default (autoincrement())
  title String
  subtitle String?
  fileName String
  path String
  products Product[] @relation("HomeSectionProducts")
}

model SalesBanner {
  id Int @id @default(autoincrement())
  fileName String
  originalFileName String
  path String
}

model Brand {
  id Int @id @default(autoincrement())
  filename String
  path String
  title String
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Order {
  id Int @id @default(autoincrement())
  orderStatus String
  username String
  email String
  phone String
  userId Int 
  user User @relation(fields: [userId], references: [id])
  subtotal Int
  deliveryAmount Int?
  total Int
  country String
  province String
  city String
  line1 String
  line2 String
  postalCode String
  orderItem orderItem[]
}

model orderItem {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
}